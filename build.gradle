plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'maven-publish'
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'net.minecraftforge.gradleutils' version '2.0.11'
}

group = 'net.minecraftforge'

version = gradleutils.tagOffsetVersion
println('Version: ' + version)

license {
    header project.file('LICENSE-header.txt')
    include 'net/minecraftforge/**/*.java'
    newLine false
}

test {
    useJUnitPlatform()
}

// If we are being told a specific vendor then we are probably being run in parallel
if (project.hasProperty('javaVendor') && project.hasProperty('javaVersion')) {
    test.javaLauncher.set(javaToolchains.launcherFor {
        it.vendor.set(JvmVendorSpec."${project.property('javaVendor').toUpperCase(Locale.ROOT)}" as JvmVendorSpec)
        it.languageVersion.set(JavaLanguageVersion.of(project.property('javaVersion') as int))
        it.implementation.set(JvmImplementation.VENDOR_SPECIFIC)
    })
} else {
    def VALID_VMS = [
        'Adoptium': [8, 11,     16, 17, 18, 19, 20, 21],
        'Amazon':   [8, 11, 15, 16, 17, 18, 19, 20, 21],
        'Azul':     (8..21),
        'BellSoft': [8] + (11..21),
        'Graal_VM': [8, 11,     16, 17,     19, 20, 21],
        'IBM':      [8, 11,     16, 17, 18, 19, 20    ],
        'SAP':      (11..20)
    ]
    VALID_VMS.each { javaVendor, javaVersions ->
        javaVersions.each { javaVersion ->
            def task = tasks.register("test${javaVendor}${javaVersion}", Test) {     
                useJUnitPlatform()       
                javaLauncher.set(javaToolchains.launcherFor {
                    it.vendor.set(JvmVendorSpec."${javaVendor.toUpperCase(Locale.ROOT)}" as JvmVendorSpec)
                    it.languageVersion.set(JavaLanguageVersion.of(javaVersion))
                    it.implementation.set(JvmImplementation.VENDOR_SPECIFIC)
                })
            }
            test.dependsOn(task)
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)
    withSourcesJar()
}

jar {
    manifest {
        attributes([
            'Automatic-Module-Name': 'net.minecraftforge.unsafe'
        ] as LinkedHashMap)
        attributes([
            'Specification-Title':    'unsafe',
            'Specification-Vendor':   'Forge',
            'Specification-Version':  gradleutils.gitInfo.tag,
            'Implementation-Title':   project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Forge'
        ] as LinkedHashMap, 'net/minecraftforge/unsafe/')
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(libs.junit.api)
    testRuntimeOnly(libs.junit.engine)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Unsafe'
                description = 'Unsafe hacks'
                url = 'https://github.com/MinecraftForge/Unsafe'
                licenses{ license { name = 'LGPLv2.1' } }
            }
        }
    }
    repositories {
        maven gradleutils.publishingForgeMaven
    }
}